
//
// Generated by JTB 1.3.2
//
import visitor.*;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class metaDataGen extends GJDepthFirst<String, Map<String, String>> {
   //
   // Map<String, String>uto class visitors--probably don't need to be overridden.
   //
   String currClass, currMethod;
   int index;

   public String visit(NodeList n, Map<String, String> argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, Map<String, String> argu) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n, Map<String, String> argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public String visit(NodeSequence n, Map<String, String> argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, Map<String, String> argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "package"
    * f1 -> Identifier()
    * f2 -> ";"
    * f3 -> "public class"
    * f4 -> Identifier()
    * f5 -> "{"
    * f6 -> "public"
    * f7 -> "static"
    * f8 -> "void"
    * f9 -> "main"
    * f10 -> "("
    * f11 -> "String"
    * f12 -> "["
    * f13 -> "]"
    * f14 -> Identifier()
    * f15 -> ")"
    * f16 -> "{"
    * f17 -> ( VarDeclaration() )*
    * f18 -> ( Statement() )*
    * f19 -> "}"
    * f20 -> "}"
    */
   public String visit(MainClass n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret = n.f4.accept(this, argu);
      Main.metaData.put(_ret, new Struct());
      currClass = _ret;
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      currMethod = "main";
      Main.metaData.get(currClass).parent = null;
      Main.metaData.get(currClass).methodType.put("main", new pair( currClass, 0));
      Main.metaData.get(currClass).methodParams.put("main", new LinkedHashMap<String, String>());
      Main.metaData.get(currClass).methodVariables.put("main", new LinkedHashMap<String, String>());
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      _ret = n.f14.accept(this, argu);
      Main.metaData.get(currClass).methodParams.get("main").put(_ret, "String[]");
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);
      n.f19.accept(this, argu);
      n.f20.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( FieldDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      index = 4;
      Main.metaData.put(_ret, new Struct());
      currClass = _ret;
      Main.metaData.get(currClass).parent = null;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      index = 0;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( FieldDeclaration() )* 
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, Map<String, String> argu) {
      String _ret = null, parent;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      parent = n.f3.accept(this, argu);
      Main.metaData.put(_ret, new Struct());
      currClass = _ret;
      Main.metaData.get(currClass).parent = parent;
      n.f4.accept(this, argu);
      index = 4;
      n.f5.accept(this, argu);
      index = 0;
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, Map<String, String> argu) {
      String _ret = null, name;
      _ret = n.f0.accept(this, argu);
      name = n.f1.accept(this, argu);
      if(Main.metaData.get(currClass).methodVariables.get(currMethod) == null) Main.metaData.get(currClass).methodVariables.put(currMethod, new LinkedHashMap<String, String>());
      Main.metaData.get(currClass).methodVariables.get(currMethod).put(name, _ret);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerType()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(FieldDeclaration n, Map<String, String> argu) {
      String _ret = null, name;
      _ret = n.f0.accept(this, argu);
      name = n.f1.accept(this, argu);
      Main.metaData.get(currClass).classVariables.put(name, index);
      Main.metaData.get(currClass).variables.add(new pair(name, index));
      index+=4;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> IntegerType()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> SubPrimaryExpression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      Main.metaData.get(currClass).methodType.put(_ret, new pair(currClass, index));
      index+=4;
      currMethod = _ret;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, Map<String, String> argu) {
      String _ret = null, name;
      _ret = n.f0.accept(this, argu);
      name = n.f1.accept(this, argu);
      if(Main.metaData.get(currClass).methodParams.get(currMethod) == null) Main.metaData.get(currClass).methodParams.put(currMethod, new LinkedHashMap<String, String>());
      Main.metaData.get(currClass).methodParams.get(currMethod).put(name, _ret);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> BooleanType()
    * | IntegerType()
    * | StringType()
    * | Identifier()
    */
   public String visit(Type n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "int";
   }

   /**
    * f0 -> "String"
    */
   public String visit(StringType n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "String";
   }

   /**
    * f0 -> Block()
    * | Map<String, String>ssignmentStatement()
    * | FieldAssignmentStatement()
    * | IfStatement()
    * | WhileStatement()
    * | PrintStatement()
    */
   public String visit(Statement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public String visit(FieldAssignmentStatement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfStatement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> SubPrimaryExpression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | Map<String, String>ndExpression()
    * | CompareExpression()
    * | NeqExpression()
    * | PlusExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | MessageSend()
    * | FieldReference()
    * | PrimaryExpression()
    */
   public String visit(Expression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "&&"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(AndExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "||"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(OrExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "<"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(CompareExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "!="
    * f2 -> SubPrimaryExpression()
    */
   public String visit(NeqExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "+"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(PlusExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "-"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(MinusExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "*"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(TimesExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "/"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(DivExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public String visit(FieldReference n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( Map<String, String>rgList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> ( Map<String, String>rgRest() )*
    */
   public String visit(ArgList n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> SubPrimaryExpression()
    */
   public String visit(ArgRest n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    * | ThisExpression()
    * | Map<String, String>llocationExpression()
    * | NotExpression()
    */
   public String visit(PrimaryExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    */
   public String visit(SubPrimaryExpression n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, Map<String, String> argu) {
      // String _ret = null;
      n.f0.accept(this, argu);
      return "int";
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n, Map<String, String> argu) {
      // String _ret = null;
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n, Map<String, String> argu) {
      // String _ret = null;
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.tokenImage;
      // System.out.println(n.f0.tokenImage);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public String visit(NotExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
