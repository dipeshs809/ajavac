
//
// Generated by JTB 1.3.2
//
//
import visitor.*;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class outputGen extends GJDepthFirst<String, Map<String, String>> {
   //
   // Map<String, String> Auto class visitors--probably don't need to be
   // overridden.
   //
   String currClass, currMethod;
   Map<String, String> methodVariables;
   Map<String, String> methodParams;
   ArrayList<String> methodOutput;
   Map<String, String> dynamicObject;
   String currObject;
   int cnt = 0;

   public int getVSize(String cls) {
      return Main.metaDataInherited.get(cls).variables.size();
   }

   public int getFSize(String cls) {
      return Main.metaDataInherited.get(cls).methodType.size();
   }

   public boolean isMethodVar(String var) {
      if ((methodParams.get(var) == null) && (methodVariables.get(var) == null))
         return false;
      return true;
   }

   public int getFieldIndex(String var) {
      int index = -1;
      ArrayList<pair> fields = Main.metaDataInherited.get(currClass).variables;
      for (pair p : fields) {
         if (p.var == var)
            index = p.index;
      }
      return index;
   }

   public int getMethodIndex(String method, String obj) {
      int index = -1;
      LinkedHashMap<String, pair> methods = Main.metaDataInherited.get(obj).methodType;
      index = methods.get(method).index;
      return index;
   }

   public String visit(NodeList n, Map<String, String> argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeListOptional n, Map<String, String> argu) {
      if (n.present()) {
         String _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public String visit(NodeOptional n, Map<String, String> argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public String visit(NodeSequence n, Map<String, String> argu) {
      String _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public String visit(NodeToken n, Map<String, String> argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public String visit(Goal n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "package"
    * f1 -> Identifier()
    * f2 -> ";"
    * f3 -> "public class"
    * f4 -> Identifier()
    * f5 -> "{"
    * f6 -> "public"
    * f7 -> "static"
    * f8 -> "void"
    * f9 -> "main"
    * f10 -> "("
    * f11 -> "String"
    * f12 -> "["
    * f13 -> "]"
    * f14 -> Identifier()
    * f15 -> ")"
    * f16 -> "{"
    * f17 -> ( VarDeclaration() )*
    * f18 -> ( Statement() )*
    * f19 -> "}"
    * f20 -> "}"
    */
   public String visit(MainClass n, Map<String, String> argu) {
      cnt = 0;
      methodParams = new LinkedHashMap<String, String>();
      methodVariables = new LinkedHashMap<String, String>();
      dynamicObject = new LinkedHashMap<String, String>();
      methodVariables.put("variableTable", "Object");
      methodVariables.put("functionTable", "Object");
      methodVariables.put("variableTablePointer", "Object");
      methodVariables.put("fName", "String");
      methodOutput = new ArrayList<String>();
      String _ret = null, temp;
      temp = "public static void main(String[] ";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      currClass = n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      currMethod = "main";
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      _ret = n.f14.accept(this, argu);
      methodParams.put(_ret, "String[]");
      temp += (_ret + "){");
      Main.outputProg.add(temp);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);
      for (String method : methodVariables.keySet()) {
         String var = methodVariables.get(method);
         if (Main.metaDataInherited.get(var) != null)
            var = "Object";
         temp = var + " " + method + ";";
         Main.outputProg.add(temp);
      }
      for (String output : methodOutput)
         Main.outputProg.add(output);
      n.f19.accept(this, argu);
      Main.outputProg.add("}");
      n.f20.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    * | ClassExtendsDeclaration()
    */
   public String visit(TypeDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( FieldDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public String visit(ClassDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      currClass = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( FieldDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public String visit(ClassExtendsDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      currClass = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(VarDeclaration n, Map<String, String> argu) {
      String _ret = null, name;
      _ret = n.f0.accept(this, argu);
      name = n.f1.accept(this, argu);
      methodVariables.put(name, _ret);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerType()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public String visit(FieldDeclaration n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> IntegerType()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> SubPrimaryExpression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public String visit(MethodDeclaration n, Map<String, String> argu) {
      cnt = 0;
      methodParams = new LinkedHashMap<String, String>();
      methodVariables = new LinkedHashMap<String, String>();
      dynamicObject = new LinkedHashMap<String, String>();
      methodVariables.put("variableTable", "Object");
      methodVariables.put("functionTable", "Object");
      methodVariables.put("variableTablePointer", "Object");
      methodVariables.put("fName", "String");
      methodOutput = new ArrayList<String>();
      String _ret = null, temp, returnVal;
      temp = "public static int ";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      currMethod = _ret;
      temp += currClass + "_" + _ret + "(Object mthis";
      n.f3.accept(this, argu);
      _ret = n.f4.accept(this, argu);
      if (_ret != null)
         temp += (", " + _ret);
      temp += "){";
      Main.outputProg.add(temp);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      returnVal = n.f10.accept(this, argu);
      // pending if identifier is a field of clas
      if (isMethodVar(returnVal) == false && getFieldIndex(returnVal) != -1) {
         String tmp;
         tmp = currClass + "_" + currMethod + cnt;
         cnt++;
         methodVariables.put(tmp, "int");
         methodOutput.add(tmp + " = (Integer) load(mthis, " + getFieldIndex(returnVal) + ");");
         returnVal = tmp;
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      for (String method : methodVariables.keySet()) {
         String var = methodVariables.get(method);
         if (Main.metaDataInherited.get(var) != null)
            var = "Object";
         temp = var + " " + method + ";";
         Main.outputProg.add(temp);
      }
      for (String output : methodOutput)
         Main.outputProg.add(output);
      Main.outputProg.add("return " + returnVal + ";");
      Main.outputProg.add("}");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public String visit(FormalParameterList n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      for (Node m : n.f1.nodes) {
         _ret += m.accept(this, argu);
      }
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public String visit(FormalParameter n, Map<String, String> argu) {
      String _ret = null, temp;
      _ret = n.f0.accept(this, argu);
      temp = n.f1.accept(this, argu);
      methodParams.put(temp, _ret);
      if (Main.metaDataInherited.get(_ret) != null)
         _ret = "Object";
      _ret += (" " + temp);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public String visit(FormalParameterRest n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.tokenImage;
      _ret += " ";
      _ret += n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> BooleanType()
    * | IntegerType()
    * | StringType()
    * | Identifier()
    */
   public String visit(Type n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public String visit(BooleanType n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "boolean";
   }

   /**
    * f0 -> "int"
    */
   public String visit(IntegerType n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "int";
   }

   /**
    * f0 -> "String"
    */
   public String visit(StringType n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "String";
   }

   /**
    * f0 -> Block()
    * | AssignmentStatement()
    * | FieldAssignmentStatement()
    * | IfStatement()
    * | WhileStatement()
    * | PrintStatement()
    */
   public String visit(Statement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public String visit(Block n, Map<String, String> argu) {
      String _ret = null;
      methodOutput.add("{");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      methodOutput.add("}");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public String visit(AssignmentStatement n, Map<String, String> argu) {
      String _ret = null, right, left, temp, temp2;
      int index;
      left = n.f0.accept(this, argu);
      currObject = left;
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu) + ";";
      n.f3.accept(this, argu);
      if (isMethodVar(left) == false) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         index = getFieldIndex(left);
         methodOutput.add(temp + " = (Integer) load(mthis, " + index + ");");
         left = temp;
         temp2 = "store(mthis, " + index + ", " + temp + ");";
         methodOutput.add(left + " = " + right);
         methodOutput.add(temp2);
      } else {
         methodOutput.add(left + " = " + right);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public String visit(FieldAssignmentStatement n, Map<String, String> argu) {
      String _ret = null, cls, field1, field2, temp, obj;
      int index = 0;
      cls = n.f0.accept(this, argu);
      obj = cls;
      n.f1.accept(this, argu);
      field1 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      field2 = n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      temp = field2;
      if (isMethodVar(field2) == false && getFieldIndex(field2) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         index = getFieldIndex(field2);
         methodOutput.add(temp + " = (Integer) load(mthis, " + index + ");");
         field2 = temp;
      }
      if (cls == "this")
         cls = currClass;
      if (methodVariables.get(cls) != null)
         cls = methodVariables.get(cls);
      if (methodParams.get(cls) != null)
         cls = methodParams.get(cls);
      if (dynamicObject.get(cls) != null)
         cls = dynamicObject.get(cls);
      ArrayList<pair> fields = Main.metaDataInherited.get(cls).variables;
      for (pair p : fields) {
         if (p.var.equals(field1))
            index = p.index;
      }
      methodOutput.add("store(" + obj + ", " + index + ", " + temp + ");");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public String visit(IfStatement n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      methodOutput.add("if(" + _ret + ")");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      methodOutput.add("else");
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public String visit(WhileStatement n, Map<String, String> argu) {
      String _ret = null, temp;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      if (isMethodVar(_ret) == false && getFieldIndex(_ret) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(_ret) + ");");
         _ret = temp;
      }
      methodOutput.add("while(" + _ret + ")");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> SubPrimaryExpression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public String visit(PrintStatement n, Map<String, String> argu) {
      String _ret = null, exp, temp;
      _ret = "System.out.println(";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      exp = n.f2.accept(this, argu);
      if (isMethodVar(exp) == false && getFieldIndex(exp) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(exp) + ");");
         exp = temp;
      }
      _ret += (exp + ");");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      methodOutput.add(_ret);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    * | AndExpression()
    * | CompareExpression()
    * | NeqExpression()
    * | PlusExpression()
    * | MinusExpression()
    * | TimesExpression()
    * | DivExpression()
    * | MessageSend()
    * | Field Reference()
    * | PrimaryExpression()
    */
   public String visit(Expression n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      if (_ret == "this")
         _ret = "mthis";
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "&&"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(AndExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " && " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "||"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(OrExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " || " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "<"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(CompareExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " < " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "!="
    * f2 -> SubPrimaryExpression()
    */
   public String visit(NeqExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " != " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "+"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(PlusExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " + " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "-"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(MinusExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " - " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "*"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(TimesExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " * " + right;
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> "/"
    * f2 -> SubPrimaryExpression()
    */
   public String visit(DivExpression n, Map<String, String> argu) {
      String _ret = null, left, right, temp;
      left = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      right = n.f2.accept(this, argu);
      if (isMethodVar(left) == false && getFieldIndex(left) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(left) + ");");
         left = temp;
      }
      if (isMethodVar(right) == false && getFieldIndex(right) != -1) {
         temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(right) + ");");
         right = temp;
      }
      _ret = left + " / " + right;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public String visit(FieldReference n, Map<String, String> argu) {
      String _ret = null, object, field, temp, cls, type;
      int index = 0;
      object = n.f0.accept(this, argu);
      type = object;
      n.f1.accept(this, argu);
      field = n.f2.accept(this, argu);
      temp = currClass + "_" + currMethod + cnt;
      if (object == "this") {
         object = "mthis";
         cls = currClass;
      }
      if (methodVariables.get(object) != null)
         object = methodVariables.get(object);
      if (methodParams.get(object) != null)
         object = methodParams.get(object);
      methodVariables.put(temp, "int");
      cnt++;
      cls = object == "mthis" ? currClass : object;
      ArrayList<pair> fields = Main.metaDataInherited.get(cls).variables;
      for (pair p : fields) {
         if (p.var == field)
            index = p.index;
      }
      methodOutput.add(temp + " = (Integer) load(" + (cls == "mthis" ? cls : type) + ", " + index + ");");
      return temp;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public String visit(MessageSend n, Map<String, String> argu) {
      String _ret = null, args, object, method, temp, callObj, origObj;
      object = n.f0.accept(this, argu);
      callObj = object;
      origObj = object;
      n.f1.accept(this, argu);
      method = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      args = n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      if (object == "this")
         callObj = currClass;
      if (methodVariables.get(object) != null)
         callObj = methodVariables.get(object);
      if (dynamicObject.get(object) != null)
         callObj = dynamicObject.get(object);
      int index = getMethodIndex(method, callObj);
      if (object == "this")
         object = "mthis";
      temp = "functionTable = load(" + object + ", 0);";
      methodOutput.add(temp);
      temp = "fName = (String) load(functionTable, " + index + ");";
      methodOutput.add(temp);
      if (args != null)
         _ret = "(Integer) callFunc(fName, " + object + args + ")";
      else
         _ret = "(Integer) callFunc(fName, " + object + ")";
      return _ret;
   }

   /**
    * f0 -> SubPrimaryExpression()
    * f1 -> ( ArgRest() )*
    */
   public String visit(ArgList n, Map<String, String> argu) {
      String _ret = "";
      ArrayList<String> args = new ArrayList<String>();
      args.add(n.f0.accept(this, argu));
      for (Node m : n.f1.nodes) {
         args.add(((ArgRest) m).f1.accept(this, argu));
      }
      // System.out.println(args);
      n.f1.accept(this, argu);
      for (String arg : args) {
         if (isMethodVar(arg) == false && getFieldIndex(arg) != -1) {
            String temp = currClass + "_" + currMethod + cnt;
            methodVariables.put(temp, "int");
            cnt++;
            methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(arg) + ");");
            arg = temp;
         }
         _ret += (", " + arg);
      }
      // System.out.println(_ret);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> SubPrimaryExpression()
    */
   public String visit(ArgRest n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.tokenImage;
      _ret += " ";
      _ret += n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    * | ThisExpression()
    * | AllocationExpression()
    * | NotExpression()
    */
   public String visit(PrimaryExpression n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    * | TrueLiteral()
    * | FalseLiteral()
    * | Identifier()
    */
   public String visit(SubPrimaryExpression n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public String visit(TrueLiteral n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public String visit(FalseLiteral n, Map<String, String> argu) {
      String _ret = null;
      _ret = n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Identifier n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return n.f0.tokenImage;
   }

   /**
    * f0 -> "this"
    */
   public String visit(ThisExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      return "this";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public String visit(AllocationExpression n, Map<String, String> argu) {
      String _ret = null, temp;
      int vSize, fSize;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      vSize = getVSize(_ret) + 1;
      fSize = getFSize(_ret);
      dynamicObject.put(currObject, _ret);
      temp = "variableTablePointer = alloc(" + (4 * vSize) + ");";
      methodOutput.add(temp);
      for (pair p : Main.metaDataInherited.get(_ret).variables) {
         methodOutput.add("store(variableTablePointer, " + p.index + ", " + 0 + ");");
      }
      temp = "functionTable = alloc(" + (fSize * 4) + ");";
      methodOutput.add(temp);
      for (String method : Main.metaDataInherited.get(_ret).methodType.keySet()) {
         pair p = Main.metaDataInherited.get(_ret).methodType.get(method);
         methodOutput.add("store(functionTable, " + p.index + ", " + '"' + p.var + "_" + method + '"' + ");");
      }
      methodOutput.add("store(variableTablePointer, 0, functionTable);");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return "variableTablePointer";
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public String visit(NotExpression n, Map<String, String> argu) {
      String _ret = null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      if (isMethodVar(_ret) == false && getFieldIndex(_ret) != -1) {
         String temp = currClass + "_" + currMethod + cnt;
         methodVariables.put(temp, "int");
         cnt++;
         methodOutput.add(temp + " = (Integer) load(mthis, " + getFieldIndex(_ret) + ");");
         _ret = temp;
      }
      return "!" + _ret;
   }

}
