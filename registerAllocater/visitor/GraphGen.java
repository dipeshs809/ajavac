//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GraphGen implements GJNoArguVisitor<String> {
    HashMap<Node, Set<String>> resultMap;
    HashMap<Node, HashMap<String, HashSet<String>>> graphMap;
    HashMap<String, HashSet<String>> graph;
    HashMap<Node, HashMap<String, String>> methodParams;
    Map<String, Integer> register;
    Node currNode;
    int r=0;

    public GraphGen(HashMap<Node, Set<String>> r, HashMap<Node, HashMap<String, HashSet<String>>> g,Map<String, Integer> cnt, HashMap<Node, HashMap<String, String>> methodParam) {
        resultMap = r;
        graphMap = g;
        register = cnt;
        this.methodParams = methodParam;
    }

    void addEdges(Set<String> s) {
        for (String a : s) {
            if(methodParams.get(currNode) != null &&  methodParams.get(currNode).get(a) != null) continue;
            for (String b : s) {
                if(methodParams.get(currNode) != null && methodParams.get(currNode).get(b) != null) continue;
                if(graph.get(a) == null) graph.put(a, new HashSet<String>());
                if(graph.get(b) == null) graph.put(b, new HashSet<String>());
                if (!a.equals(b)) {
                    graph.get(a).add(b);
                }
            }
        }
    }

    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public String visit(NodeList n) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeListOptional n) {
        if (n.present()) {
            String _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public String visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public String visit(NodeSequence n) {
        String _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public String visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> ( <REGLIMIT> )?
     * f1 -> MainClass()
     * f2 -> ( TypeDeclaration() )*
     * f3 -> <EOF>
     */
    public String visit(Goal n) {
        String _ret = null;
        if (n.f0 != null) {
            int len = (n.f0.tokenImage).length();
            r = Integer.parseInt(n.f0.tokenImage.substring(2, len - 2));
        }
        register.put("r",r);
        // System.out.println(registers);
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public String visit(MainClass n) {
        String _ret = null;
        graph = new HashMap<String, HashSet<String>>();
        currNode = n;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        n.f13.accept(this);
        n.f14.accept(this);
        n.f15.accept(this);
        n.f16.accept(this);
        n.f17.accept(this);
        graphMap.put(n, graph);
        // System.out.println(graph);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public String visit(TypeDeclaration n) {
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public String visit(ClassDeclaration n) {
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public String visit(ClassExtendsDeclaration n) {
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public String visit(VarDeclaration n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        // if (resultMap.containsKey(n)) {
        // System.out.println("VarDeclaration : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public String visit(MethodDeclaration n) {
        String _ret = null;
        currNode = n;
        graph = new HashMap<String, HashSet<String>>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        if (resultMap.containsKey(n)) {
            addEdges(resultMap.get(n));
        }
        graphMap.put(n, graph);
        // System.out.println(graph);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public String visit(FormalParameterList n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public String visit(FormalParameter n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public String visit(FormalParameterRest n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | StringType()
     * | FloatType()
     * | Identifier()
     */
    public String visit(Type n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public String visit(ArrayType n) {
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "float"
     */
    public String visit(FloatType n) {
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public String visit(BooleanType n) {
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public String visit(IntegerType n) {
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | FieldAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     * | LivenessQueryStatement()
     */
    public String visit(Statement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public String visit(Block n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public String visit(AssignmentStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        // if (resultMap.containsKey(n)) {
        // System.out.println("AssignmentStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Identifier()
     * f6 -> ";"
     */
    public String visit(ArrayAssignmentStatement n) {
        // if (resultMap.containsKey(n)) {
        // System.out.println("ArrayAssignmentStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public String visit(FieldAssignmentStatement n) {
        // if (resultMap.containsKey(n)) {
        // System.out.println("FieldAssignmentStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public String visit(IfStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(IfthenStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        // if (resultMap.containsKey(n)) {
        // System.out.println("IfthenStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public String visit(IfthenElseStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        // if (resultMap.containsKey(n)) {
        // System.out.println("IfthenElseStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public String visit(WhileStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        // if (resultMap.containsKey(n)) {
        // System.out.println("WhileStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public String visit(PrintStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        // if (resultMap.containsKey(n)) {
        // System.out.println("PrintStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <LIVENESSQUERY>
     * f2 -> <SCOMMENT2>
     */
    public String visit(LivenessQueryStatement n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        // if (resultMap.containsKey(n)) {
        // System.out.println("LivenessQueryStatement : " + resultMap.get(n));
        // } else {
        // System.err.println("LivenessQueryStatement missing: " + n);
        // }

        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | neqExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | PrimaryExpression()
     */
    public String visit(Expression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&&"
     * f2 -> Identifier()
     */
    public String visit(AndExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "||"
     * f2 -> Identifier()
     */
    public String visit(OrExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "<="
     * f2 -> Identifier()
     */
    public String visit(CompareExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "!="
     * f2 -> Identifier()
     */
    public String visit(neqExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "+"
     * f2 -> Identifier()
     */
    public String visit(PlusExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "-"
     * f2 -> Identifier()
     */
    public String visit(MinusExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "*"
     * f2 -> Identifier()
     */
    public String visit(TimesExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "/"
     * f2 -> Identifier()
     */
    public String visit(DivExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public String visit(ArrayLookup n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public String visit(ArrayLength n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public String visit(MessageSend n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public String visit(ArgList n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public String visit(ArgRest n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | FloatLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     */
    public String visit(PrimaryExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public String visit(IntegerLiteral n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <FLOAT_LITERAL>
     */
    public String visit(FloatLiteral n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public String visit(TrueLiteral n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public String visit(FalseLiteral n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public String visit(Identifier n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public String visit(ThisExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public String visit(ArrayAllocationExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public String visit(AllocationExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public String visit(NotExpression n) {
        if (resultMap.get(n) != null)
            addEdges(resultMap.get(n));
        String _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

}
