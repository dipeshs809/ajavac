//
// Generated by JTB 1.3.2
//

package visitor;

import java.util.SortedMap;
import syntaxtree.*;
import java.util.*;

import in.ac.iitmandi.compl.datastructures.CFGNode;
import in.ac.iitmandi.compl.datastructures.NODETYPE;
import in.ac.iitmandi.compl.utils.CommonUtils;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class DemoVisitor implements GJNoArguVisitor<String> {
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	DefSet defSet = new DefSet();
	UseSet useSet = new UseSet();
	boolean flag = true;

	Map<CFGNode, TreeSet<String>> livein, liveout;
	SortedSet<String> tempLiveIn, tempLiveOut;
	CFGNode currEndNode;
	Map<Integer, CFGNode> livenessQuery;
	ArrayList<Integer> livePosition;
	ArrayList<String> liveVar;
	public void printlive(){
		Collections.sort(livePosition);
		for(Integer i : livePosition){
			ArrayList<String> temp = new ArrayList<>();
			for(String var: livein.get(livenessQuery.get(i))){
				temp.add(var);
			}
			printinCSV(temp);
		}
	}

	public void printinCSV(ArrayList<String> val){
		if(val.size() == 0){
			System.out.println();
			return;
		}
		String ans = val.get(0);
		for(int i = 1;i<val.size();i++){
			ans+= ("," + val.get(i));
		}
		System.out.println(ans);
	}

	public void addDef(CFGNode node, ArrayList<String> def) {
		for (String s : def)
			node.addDef(s);
	}

	public void addUse(CFGNode node, ArrayList<String> use) {
		for (String s : use)
			node.addUse(s);
	}

	public String visit(NodeList n) {
		String _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public String visit(NodeListOptional n) {
		if (n.present()) {
			String _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public String visit(NodeOptional n) {
		if (n.present())
			return n.node.accept(this);
		else
			return null;
	}

	public String visit(NodeSequence n) {
		String _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this);
			_count++;
		}
		return _ret;
	}

	public String visit(NodeToken n) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass()
	 * f1 -> ( TypeDeclaration() )*
	 * f2 -> <EOF>
	 */
	public String visit(Goal n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> "public"
	 * f4 -> "static"
	 * f5 -> "void"
	 * f6 -> "main"
	 * f7 -> "("
	 * f8 -> "String"
	 * f9 -> "["
	 * f10 -> "]"
	 * f11 -> Identifier()
	 * f12 -> ")"
	 * f13 -> "{"
	 * f14 -> ( VarDeclaration() )*
	 * f15 -> ( Statement() )*
	 * f16 -> "}"
	 * f17 -> "}"
	 */
	public String visit(MainClass n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		n.f8.accept(this);
		n.f9.accept(this);
		n.f10.accept(this);
		n.f11.accept(this);
		n.f12.accept(this);
		n.f13.accept(this);
		n.f14.accept(this);
		n.f15.accept(this);
		n.f16.accept(this);
		n.f17.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration()
	 * | ClassExtendsDeclaration()
	 */
	public String visit(TypeDeclaration n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> ( VarDeclaration() )*
	 * f4 -> ( MethodDeclaration() )*
	 * f5 -> "}"
	 */
	public String visit(ClassDeclaration n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "extends"
	 * f3 -> Identifier()
	 * f4 -> "{"
	 * f5 -> ( VarDeclaration() )*
	 * f6 -> ( MethodDeclaration() )*
	 * f7 -> "}"
	 */
	public String visit(ClassExtendsDeclaration n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		n.f7.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 * f2 -> ";"
	 */
	public String visit(VarDeclaration n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "public"
	 * f1 -> Type()
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( FormalParameterList() )?
	 * f5 -> ")"
	 * f6 -> "{"
	 * f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )*
	 * f9 -> "return"
	 * f10 -> Identifier()
	 * f11 -> ";"
	 * f12 -> "}"
	 */
	public String visit(MethodDeclaration n) {
		livenessQuery = new HashMap<Integer,CFGNode>();
		livePosition = new ArrayList<>();
		CFGNode startNode = CommonUtils.getMethodCFG(n);
		DotPrintVisitor vObj = new DotPrintVisitor();
		// System.out.println("Printing CFG for method " + n.f2.f0.tokenImage);
		livein = new LinkedHashMap<CFGNode, TreeSet<String>>();
		liveout = new LinkedHashMap<CFGNode, TreeSet<String>>();
		traverseAndPrintCFG(startNode, vObj, new ArrayList<>());
		flag = true;
		while (flag) {
			flag = false;
			performIDFA(currEndNode, new ArrayList<CFGNode>());
		}
		// System.out.println("Printing CFG for method " + n.f2.f0.tokenImage);
		traverseAndPrintCFG2(startNode, vObj, new ArrayList<>());
		printlive();
		CommonUtils.createDotFile("demoMethod", startNode);// Visualizing the CFG
		return null;
	}

	/** Depth first traversal and printing */
	private void traverseAndPrintCFG(CFGNode startNode, DotPrintVisitor vObj, List<CFGNode> traversedNodes) {
		if (traversedNodes.isEmpty() || !traversedNodes.contains(startNode)) {
			traversedNodes.add(startNode);
			if (null != startNode && startNode.getNode() != null) {
				// StringBuffer v = startNode.getNode().accept(vObj);
				// String s = v.toString();
				// System.out.println(s.equals("/*PRINTLIVEVARIABLES*/"));
				// System.out.println("Current Node: " + startNode.getNode().accept(vObj));
				if (startNode.getType() == NODETYPE.INTERMEDIATENODE) {
					addDef(startNode, startNode.getNode().accept(defSet));
				}
				addUse(startNode, startNode.getNode().accept(useSet));
				addDef(startNode, startNode.getNode().accept(defSet));
				livein.put(startNode, new TreeSet<String>());
				liveout.put(startNode, new TreeSet<String>());
				// System.out.println("Def sets " + startNode.def);
				// System.out.println("Use sets " + startNode.use);
				// System.out.println("livein sets " + livein.get(startNode));
				// System.out.println("liveout sets " + liveout.get(startNode));

			}
			printSuccessors(startNode, vObj, traversedNodes);
		}
	}

	private void printSuccessors(CFGNode startNode, DotPrintVisitor vObj, List<CFGNode> traversedNodes) {
		if (startNode!= null && CommonUtils.isNotNull(startNode.getSuccessorNodes())) {
			List<CFGNode> successors = startNode.getSuccessorNodes();
			for (CFGNode node : successors) {
				if (node.getType() != NODETYPE.ENDNODE) { // start and end nodes do not have node objects in CFG ds.
					// addDef(startNode, startNode.getNode().accept(defSet));
					// addUse(startNode, startNode.getNode().accept(useSet));
					// System.out.println(" Successor Node: " + node.getNode().accept(vObj));
					// if(node.getType() == NODETYPE.INTERMEDIATENODE){
					// addDef(node, startNode.getNode().accept(defSet));
					// addUse(node, startNode.getNode().accept(useSet));
					// }
				} else {
					// System.out.println(" Successor Node: " + "End Node");
					currEndNode = node;
				}
			}
			// System.out.println();
			for (CFGNode node : successors) {
				traverseAndPrintCFG(node, vObj, traversedNodes);
			}
		}

	}

	private void traverseAndPrintCFG2(CFGNode startNode, DotPrintVisitor vObj, List<CFGNode> traversedNodes) {
		if (traversedNodes.isEmpty() || !traversedNodes.contains(startNode)) {
			traversedNodes.add(startNode);
			if (null != startNode && startNode.getNode() != null) {
				StringBuffer v = startNode.getNode().accept(vObj);
				String s = v.toString();
				// System.out.println(s.equals("/*PRINTLIVEVARIABLES*/"));
				if(s.equals("/*PRINTLIVEVARIABLES*/")){
					livenessQuery.put(startNode.line, startNode);
					livePosition.add(startNode.line);
				}
				// System.out.println("Current Node: " + startNode.getNode().accept(vObj) + " line number " + startNode.line);
				// if (startNode.getType() == NODETYPE.INTERMEDIATENODE) {
				// 	addDef(startNode, startNode.getNode().accept(defSet));
				// }
				// addUse(startNode, startNode.getNode().accept(useSet));
				// addDef(startNode, startNode.getNode().accept(defSet));
				// livein.put(startNode, new TreeSet<String>());
				// liveout.put(startNode, new TreeSet<String>());
				// System.out.println("Def sets " + startNode.def);
				// System.out.println("Use sets " + startNode.use);
				// System.out.println("livein sets " + livein.get(startNode));
				// System.out.println("liveout sets " + liveout.get(startNode));

			}
			printSuccessors2(startNode, vObj, traversedNodes);
		}
	}

	private void printSuccessors2(CFGNode startNode, DotPrintVisitor vObj, List<CFGNode> traversedNodes) {
		if (startNode!= null && CommonUtils.isNotNull(startNode.getSuccessorNodes())) {
			List<CFGNode> successors = startNode.getSuccessorNodes();
			for (CFGNode node : successors) {
				if (node.getType() != NODETYPE.ENDNODE) { // start and end nodes do not have node objects in CFG ds.
					// addDef(startNode, startNode.getNode().accept(defSet));
					// addUse(startNode, startNode.getNode().accept(useSet));
					// System.out.println(" Successor Node: " + node.getNode().accept(vObj));
					// if(node.getType() == NODETYPE.INTERMEDIATENODE){
					// addDef(node, startNode.getNode().accept(defSet));
					// addUse(node, startNode.getNode().accept(useSet));
					// }
				} else {
					// System.out.println(" Successor Node: " + "End Node");
					currEndNode = node;
				}
			}
			// System.out.println();
			for (CFGNode node : successors) {
				traverseAndPrintCFG2(node, vObj, traversedNodes);
			}
		}

	}

	private void performIDFA(CFGNode endNode, List<CFGNode> traversedNodes) {
		if (traversedNodes.isEmpty() || !traversedNodes.contains(endNode)) {
			traversedNodes.add(endNode);
			if (null != endNode && endNode.getNode() != null && endNode.getType() != NODETYPE.STARTNODE && endNode.getType() != NODETYPE.ENDNODE) {
				tempLiveIn = new TreeSet<>();
				tempLiveIn.addAll(livein.get(endNode));
				tempLiveOut = new TreeSet<>();
				tempLiveOut.addAll(liveout.get(endNode));
				TreeSet<String> in = new TreeSet<>();
				TreeSet<String> out = liveout.get(endNode);
				in.addAll(out);
				in.removeAll(endNode.def);
				in.addAll(endNode.use);
				livein.put(endNode, in);
				for(CFGNode node: endNode.getSuccessorNodes()){
					if(node.getType()!=NODETYPE.STARTNODE && node.getType()!=NODETYPE.ENDNODE)out.addAll(livein.get(node));
				}
				if(!(out.equals(tempLiveOut) && in.equals(tempLiveIn))){
					flag = true;
				}
			}
			dfs(endNode, traversedNodes);
		}
	}

	private void dfs(CFGNode endNode, List<CFGNode> traversedNodes) {
		if (endNode!= null &&  CommonUtils.isNotNull(endNode.getPredecessorNodes())) {
			List<CFGNode> predecessor = endNode.getPredecessorNodes();
			for (CFGNode node : predecessor) {
				performIDFA(node, traversedNodes);
			}
		}
	}

	/**
	 * f0 -> FormalParameter()
	 * f1 -> ( FormalParameterRest() )*
	 */
	public String visit(FormalParameterList n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 */
	public String visit(FormalParameter n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> FormalParameter()
	 */
	public String visit(FormalParameterRest n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ArrayType()
	 * | BooleanType()
	 * | IntegerType()
	 * | FloatType()
	 * | Identifier()
	 */
	public String visit(Type n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 * f1 -> "["
	 * f2 -> "]"
	 */
	public String visit(ArrayType n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "float"
	 */
	public String visit(FloatType n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "boolean"
	 */
	public String visit(BooleanType n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 */
	public String visit(IntegerType n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Block()
	 * | AssignmentStatement()
	 * | ArrayAssignmentStatement()
	 * | FieldAssignmentStatement()
	 * | IfStatement()
	 * | WhileStatement()
	 * | PrintStatement()
	 * | LivenessQueryStatement()
	 */
	public String visit(Statement n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "{"
	 * f1 -> ( Statement() )*
	 * f2 -> "}"
	 */
	public String visit(Block n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "="
	 * f2 -> Expression()
	 * f3 -> ";"
	 */
	public String visit(AssignmentStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "["
	 * f2 -> Identifier()
	 * f3 -> "]"
	 * f4 -> "="
	 * f5 -> Identifier()
	 * f6 -> ";"
	 */
	public String visit(ArrayAssignmentStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "."
	 * f2 -> Identifier()
	 * f3 -> "="
	 * f4 -> Identifier()
	 * f5 -> ";"
	 */
	public String visit(FieldAssignmentStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		return _ret;
	}

	/**
	 * f0 -> IfthenElseStatement()
	 * | IfthenStatement()
	 */
	public String visit(IfStatement n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Identifier()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public String visit(IfthenStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Identifier()
	 * f3 -> ")"
	 * f4 -> Statement()
	 * f5 -> "else"
	 * f6 -> Statement()
	 */
	public String visit(IfthenElseStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		n.f6.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "while"
	 * f1 -> "("
	 * f2 -> Identifier()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public String visit(WhileStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "System.out.println"
	 * f1 -> "("
	 * f2 -> Identifier()
	 * f3 -> ")"
	 * f4 -> ";"
	 */
	public String visit(PrintStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> <SCOMMENT1>
	 * f1 -> <LIVENESSQUERY>
	 * f2 -> <SCOMMENT2>
	 */
	public String visit(LivenessQueryStatement n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> OrExpression()
	 * | AndExpression()
	 * | CompareExpression()
	 * | neqExpression()
	 * | PlusExpression()
	 * | MinusExpression()
	 * | TimesExpression()
	 * | DivExpression()
	 * | ArrayLookup()
	 * | ArrayLength()
	 * | MessageSend()
	 * | PrimaryExpression()
	 */
	public String visit(Expression n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "&&"
	 * f2 -> Identifier()
	 */
	public String visit(AndExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "||"
	 * f2 -> Identifier()
	 */
	public String visit(OrExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "<="
	 * f2 -> Identifier()
	 */
	public String visit(CompareExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "!="
	 * f2 -> Identifier()
	 */
	public String visit(neqExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "+"
	 * f2 -> Identifier()
	 */
	public String visit(PlusExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "-"
	 * f2 -> Identifier()
	 */
	public String visit(MinusExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "*"
	 * f2 -> Identifier()
	 */
	public String visit(TimesExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "/"
	 * f2 -> Identifier()
	 */
	public String visit(DivExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "["
	 * f2 -> Identifier()
	 * f3 -> "]"
	 */
	public String visit(ArrayLookup n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "."
	 * f2 -> "length"
	 */
	public String visit(ArrayLength n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "."
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( ArgList() )?
	 * f5 -> ")"
	 */
	public String visit(MessageSend n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		n.f5.accept(this);
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> ( ArgRest() )*
	 */
	public String visit(ArgList n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> Identifier()
	 */
	public String visit(ArgRest n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

	/**
	 * f0 -> IntegerLiteral()
	 * | FloatLiteral()
	 * | TrueLiteral()
	 * | FalseLiteral()
	 * | Identifier()
	 * | ThisExpression()
	 * | ArrayAllocationExpression()
	 * | AllocationExpression()
	 * | NotExpression()
	 */
	public String visit(PrimaryExpression n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public String visit(IntegerLiteral n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> <FLOAT_LITERAL>
	 */
	public String visit(FloatLiteral n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "true"
	 */
	public String visit(TrueLiteral n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "false"
	 */
	public String visit(FalseLiteral n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public String visit(Identifier n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "this"
	 */
	public String visit(ThisExpression n) {
		String _ret = null;
		n.f0.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "new"
	 * f1 -> "int"
	 * f2 -> "["
	 * f3 -> Identifier()
	 * f4 -> "]"
	 */
	public String visit(ArrayAllocationExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		n.f4.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "new"
	 * f1 -> Identifier()
	 * f2 -> "("
	 * f3 -> ")"
	 */
	public String visit(AllocationExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		n.f2.accept(this);
		n.f3.accept(this);
		return _ret;
	}

	/**
	 * f0 -> "!"
	 * f1 -> Identifier()
	 */
	public String visit(NotExpression n) {
		String _ret = null;
		n.f0.accept(this);
		n.f1.accept(this);
		return _ret;
	}

}
