//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

import in.ac.iitmandi.compl.datastructures.CFGNode;
import in.ac.iitmandi.compl.datastructures.NODETYPE;
import in.ac.iitmandi.compl.utils.CommonUtils;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class UseSet implements GJNoArguVisitor<ArrayList<String>> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //

    public void appendArray(ArrayList<String> target, ArrayList<String> destination) {
        if(destination == null || destination.size() ==0 ) return;
        for (String s : destination) {
            target.add(s);
        }
    }

    public ArrayList<String> visit(NodeList n) {
        ArrayList<String> _ret = new ArrayList<String>();
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public ArrayList<String> visit(NodeListOptional n) {
        if (n.present()) {
            ArrayList<String> _ret = new ArrayList<String>();
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public ArrayList<String> visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public ArrayList<String> visit(NodeSequence n) {
        ArrayList<String> _ret = new ArrayList<String>();
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public ArrayList<String> visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> <EOF>
     */
    public ArrayList<String> visit(Goal n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     */
    public ArrayList<String> visit(MainClass n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        n.f13.accept(this);
        n.f14.accept(this);
        n.f15.accept(this);
        n.f16.accept(this);
        n.f17.accept(this);
        return _ret;
    }

    /**
     * f0 -> ClassDeclaration()
     * | ClassExtendsDeclaration()
     */
    public ArrayList<String> visit(TypeDeclaration n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     */
    public ArrayList<String> visit(ClassDeclaration n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     */
    public ArrayList<String> visit(ClassExtendsDeclaration n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     */
    public ArrayList<String> visit(VarDeclaration n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Identifier()
     * f11 -> ";"
     * f12 -> "}"
     */
    public ArrayList<String> visit(MethodDeclaration n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public ArrayList<String> visit(FormalParameterList n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Type()
     * f1 -> Identifier()
     */
    public ArrayList<String> visit(FormalParameter n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> FormalParameter()
     */
    public ArrayList<String> visit(FormalParameterRest n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ArrayType()
     * | BooleanType()
     * | IntegerType()
     * | FloatType()
     * | Identifier()
     */
    public ArrayList<String> visit(Type n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     */
    public ArrayList<String> visit(ArrayType n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> "float"
     */
    public ArrayList<String> visit(FloatType n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "boolean"
     */
    public ArrayList<String> visit(BooleanType n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "int"
     */
    public ArrayList<String> visit(IntegerType n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Block()
     * | AssignmentStatement()
     * | ArrayAssignmentStatement()
     * | FieldAssignmentStatement()
     * | IfStatement()
     * | WhileStatement()
     * | PrintStatement()
     * | LivenessQueryStatement()
     */
    public ArrayList<String> visit(Statement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret = n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     */
    public ArrayList<String> visit(Block n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     */
    public ArrayList<String> visit(AssignmentStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        _ret = n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Identifier()
     * f6 -> ";"
     */
    public ArrayList<String> visit(ArrayAssignmentStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        n.f3.accept(this);
        n.f4.accept(this);
        appendArray(_ret, n.f5.accept(this));
        n.f6.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "="
     * f4 -> Identifier()
     * f5 -> ";"
     */
    public ArrayList<String> visit(FieldAssignmentStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret = n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        appendArray(_ret, n.f4.accept(this));
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> IfthenElseStatement()
     * | IfthenStatement()
     */
    public ArrayList<String> visit(IfStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret = n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public ArrayList<String> visit(IfthenStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        _ret = n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     */
    public ArrayList<String> visit(IfthenElseStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        _ret = n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        return _ret;
    }

    /**
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> Statement()
     */
    public ArrayList<String> visit(WhileStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        _ret = n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Identifier()
     * f3 -> ")"
     * f4 -> ";"
     */
    public ArrayList<String> visit(PrintStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        _ret = n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> <SCOMMENT1>
     * f1 -> <LIVENESSQUERY>
     * f2 -> <SCOMMENT2>
     */
    public ArrayList<String> visit(LivenessQueryStatement n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> OrExpression()
     * | AndExpression()
     * | CompareExpression()
     * | neqExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | DivExpression()
     * | ArrayLookup()
     * | ArrayLength()
     * | MessageSend()
     * | PrimaryExpression()
     */
    public ArrayList<String> visit(Expression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret = n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "&&"
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(AndExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "||"
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(OrExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "<="
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(CompareExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "!="
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(neqExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "+"
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(PlusExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "-"
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(MinusExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "*"
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(TimesExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "/"
     * f2 -> Identifier()
     */
    public ArrayList<String> visit(DivExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Identifier()
     * f3 -> "]"
     */
    public ArrayList<String> visit(ArrayLookup n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        appendArray(_ret, n.f2.accept(this));
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> "length"
     */
    public ArrayList<String> visit(ArrayLength n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ArgList() )?
     * f5 -> ")"
     */
    public ArrayList<String> visit(MessageSend n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        appendArray(_ret, n.f4.accept(this));
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> Identifier()
     * f1 -> ( ArgRest() )*
     */
    public ArrayList<String> visit(ArgList n) {
        ArrayList<String> _ret = new ArrayList<String>();
        appendArray(_ret, n.f0.accept(this));
        for(Node m: n.f1.nodes){
            appendArray(_ret, ((ArgRest)m).f1.accept(this));
        }
        return _ret;
    }

    /**
     * f0 -> ","
     * f1 -> Identifier()
     */
    public ArrayList<String> visit(ArgRest n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | FloatLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ThisExpression()
     * | ArrayAllocationExpression()
     * | AllocationExpression()
     * | NotExpression()
     */
    public ArrayList<String> visit(PrimaryExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret = n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public ArrayList<String> visit(IntegerLiteral n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <FLOAT_LITERAL>
     */
    public ArrayList<String> visit(FloatLiteral n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "true"
     */
    public ArrayList<String> visit(TrueLiteral n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "false"
     */
    public ArrayList<String> visit(FalseLiteral n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public ArrayList<String> visit(Identifier n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret.add(n.f0.tokenImage);
        // n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> "this"
     */
    public ArrayList<String> visit(ThisExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        _ret.add("this");
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Identifier()
     * f4 -> "]"
     */
    public ArrayList<String> visit(ArrayAllocationExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        appendArray(_ret, n.f3.accept(this));
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     */
    public ArrayList<String> visit(AllocationExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> "!"
     * f1 -> Identifier()
     */
    public ArrayList<String> visit(NotExpression n) {
        ArrayList<String> _ret = new ArrayList<String>();
        n.f0.accept(this);
        _ret = n.f1.accept(this);
        return _ret;
    }

}
